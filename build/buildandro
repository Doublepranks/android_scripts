#!/bin/bash
# Written by Sean Donovan (swordrune10)

#declare variables
if [ "$other_repo" ]; then
	repofolder=$( echo "$other_repo_folder" )
	buildfolder=$( echo "$BUILDS/$other_repo" )
	newzip=$(echo $other_repo-$(date +%Y%m%d)-SWORDKITCHEN-$script_device.zip)
elif [ "$auto_build" ]; then
	repofolder=$( echo "$REPOS/$auto_build_folder" )
	buildfolder=$( echo "$BUILDS/$auto_build_folder" )
	newzip=$(echo $auto_build_folder-$(date +%Y%m%d)-SWORDKITCHEN-$script_device.zip)
else
	repofolder=$( echo "$REPOS/$script_repo-$repo_platform" )
	buildfolder=$( echo "$BUILDS/$script_repo-$repo_platform" )
	newzip=$(echo $script_repo-$repo_platform-$(date +%Y%m%d)-SWORDKITCHEN-$script_device.zip)
fi

outfolder=$(echo "$repofolder/out/target/product/$script_device")

#setup build
rm -f $outfolder/system/build.prop
rm -f $outfolder/*.zip*

cd $repofolder

. build/envsetup.sh

if [ ! $sloppyseconds ]; then
	$LOCAL/config/romeditor

	if [ $AUTO ]; then
		make clean
	else
		echo "clean out folder?"
		read -p "yes/no? " purgeout

		if [ "$purgeout" == "" ]; then
			echo ""
			echo "Did you just hit enter without a care? for that im just gonna clean the folder anyways.."

			make clean
		fi

		if [ $purgeout == "yes" ] || [ $purgeout == "y" ]; then
			make clean
		fi
	fi
fi

#setup ccache
if [ $AUTO ]; then
	if ( ! find ~/.ccache &> /dev/null); then
		echo "Continuing without ccache use; if you want to use ccache, please set it up"
	else
		echo "Found ccache folder, will use for build"
	fi
else
	if ( ! find ~/.ccache &> /dev/null); then
		echo "The kitchen did not detect the ccache folder, did you want to make one now?"
		echo "If ccache is located at another location type in other"
		read ccacheuse

		if [ $ccacheuse == "yes" ] || [ $ccacheuse == "y" ]; then
			echo "How big do you want the maximum size of ccache? suggested size is 50 - 100 gigabytes"
			echo "Keep in mind the amount typed is in gigabytes"
			read ccachesize

			if ( uname -a | grep -q Darwin ); then
				if ( find prebuilts/misc/darwin-x86/ccache/ccache &> /dev/null); then
					prebuilts/misc/darwin-x86/ccache/ccache -M "$ccachesize"G
				elif ( find prebuilt/darwin-x86/ccache/ccache &> /dev/null); then
					prebuilt/darwin-x86/ccache/ccache -M "$ccachesize"G
				else
					echo "Repository does not support ccache, continuing without it"
					noccache=true
				fi
			else
				if ( find prebuilts/misc/linux-x86/ccache/ccache &> /dev/null); then
					prebuilts/misc/linux-x86/ccache/ccache -M "$ccachesize"G
				elif ( find prebuilt/linux-x86/ccache/ccache &> /dev/null); then
					prebuilt/linux-x86/ccache/ccache -M "$ccachesize"G
				else
					echo "Repository does not support ccache, continuing without it"
					noccache=true
				fi
			fi
		elif [ $ccacheuse == "other" ]; then
			echo "Where is the exact location of ccache? Example of where default location is is ~/.ccache"
			read ccachelocation

			if ( ! find $ccachelocation &> /dev/null); then
				echo "Location specified was not found, continuing without it"
				noccache=true
			else
				export CCACHE_DIR=$( echo "$ccachelocation" )
			fi
		else
			echo "Continuing without ccache use"
			noccache=true
		fi
	else
		echo "Found ccache folder, will use for build"
	fi
fi

if [ ! "$noccache" ]; then
	export USE_CCACHE=1
fi

#build android

if [ $script_repo == "cm" ]; then
	brunch $script_device -j $CPU_POWER_TOTAL
elif [ $script_repo == "omni" ]; then
	lunch custom_$script_device-userdebug
	mka bacon -j $CPU_POWER_TOTAL
elif [ $script_repo == "pacman" ]; then
	rm -f out/target/product/$script_device/obj/KERNEL_OBJ/.version

	lunch pac_$script_device-userdebug
	make bacon -j $CPU_POWER_TOTAL

	vendor/pac/tools/squisher

	rm -f $outfolder/cm-*.*
	rm -f $outfolder/pac_*-ota*.zip
elif [ $script_repo == "paranoid" ]; then
	lunch pa_$script_device-userdebug
	mka bacon -j $CPU_POWER_TOTAL
else
	if ( cat vendor/*/vendorsetup.sh 2> /dev/null | grep $script_device &> /dev/null ); then
		lunch_device=$( cat $( find vendor/*/vendorsetup.sh | sed "/cm\/vendorsetup.sh/d" | head -n 1 ) \
		| grep $script_device | sed 's/add_lunch_combo //' )
	fi

	if [ ! "$lunch_device" ] && ( find device/*/$script_device/vendorsetup.sh &> /dev/null ); then
		lunch_device=$( cat device/*/$script_device/vendorsetup.sh | grep $script_device | sed 's/add_lunch_combo //' )
	fi

	if [ ! "$lunch_device" ]; then
			echo "Repository not supported!"
			read -p "Press Enter to continue: " done
			exit 0
	fi

	lunch $lunch_device
	make otapackage -j $CPU_POWER_TOTAL
fi

#build aftermath
cd $repofolder/out/target/product/$script_device
zip=$( find *$script_device*.zip 2> /dev/null )

if [ ! "$zip" ]; then
	echo "Build messed up! Returning to build menu"
	read -p "Press Enter to continue: " done
	exit 0
fi

if [ $script_repo == "aosp" ]; then

	echo "Making temporary folder for post-building $zip fixes"
	mkdir -p $BUILDS/temp/zipout
	cp $zip $BUILDS/temp
	cd $BUILDS/temp/zipout

	echo "Unzipping $zip"
	unzip ../$zip > /dev/null

	echo "Removing uneeded recovery folder and file_contexts from $zip"
	rm -r recovery
	rm file_contexts

	if [ $script_repo == "aosp" ]; then
		cd system
		echo "Adding rom manager items to $zip's build.prop"
		echo "ro.rommanager.developerid=$(whoami)" >> build.prop
		echo "ro.modversion=$newzip >> build.prop"

		cd ..
	fi

	cd META-INF/com/google/android
	sed -i "/install-recovery.sh.*/d" updater-script
	cd $BUILDS/temp/zipout
	

	echo "Zipping $zip back up"
	zip -r unsignedcrap.zip . > /dev/null

	echo "Signing $zip with test keys"
	java -Xmx2048m -jar $repofolder/out/host/linux-x86/framework/signapk.jar -w $repofolder/build/target/product/security/testkey.x509.pem $repofolder/build/target/product/security/testkey.pk8 unsignedcrap.zip $zip
fi

if ( find $buildfolder/*$script_device.zip &> /dev/null); then
	mkdir -p $buildfolder/old

	echo "Moving older build to $buildfolder/old"

	mv $buildfolder/*$script_device.zip $buildfolder/old
	mv $buildfolder/*$script_device.zip.md5sum $buildfolder/old
fi

mkdir -p $buildfolder

echo "Copying to $buildfolder"
echo "$zip -> $newzip"
cat $zip > $buildfolder/$newzip

if [ $script_repo == "aosp" ]; then
	echo "Cleaning up temporary folder"
	cd $BUILDS
	rm -r temp
fi

cd $buildfolder
md5sum $newzip
md5sum $newzip > $newzip.md5sum

echo "Finished!"

if [ ! $AUTO ]; then
	read -p "Press Enter to continue: " done
fi
