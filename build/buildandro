#!/bin/bash
# Written by Sean Donovan (swordrune10)

#declare variables
if [ "$OTHER_REPO" ]; then
	repofolder=$( echo "$OTHER_REPO_FOLDER" )
	buildfolder=$( echo "$BUILDS/$OTHER_REPO" )
	newzip=$(echo $OTHER_REPO-$(date +%Y%m%d)-SWORDKITCHEN-$SCRIPT_DEVICE.zip)
elif [ "$AUTO_BUILD" ]; then
	repofolder=$( echo "$REPOS/$AUTO_BUILD_FOLDER" )
	buildfolder=$( echo "$BUILDS/$AUTO_BUILD_FOLDER" )
	newzip=$(echo $AUTO_BUILD_FOLDER-$(date +%Y%m%d)-SWORDKITCHEN-$SCRIPT_DEVICE.zip)
else
	repofolder=$( echo "$REPOS/$SCRIPT_REPO-$REPO_PLATFORM" )
	buildfolder=$( echo "$BUILDS/$SCRIPT_REPO-$REPO_PLATFORM" )
	newzip=$(echo $SCRIPT_REPO-$REPO_PLATFORM-$(date +%Y%m%d)-SWORDKITCHEN-$SCRIPT_DEVICE.zip)
fi

outfolder=$(echo "$repofolder/out/target/product/$SCRIPT_DEVICE")

#setup build
rm -f $outfolder/system/build.prop
rm -f $outfolder/*.zip*

cd $repofolder

. build/envsetup.sh

if [ ! $SLOPPYSECONDS ]; then
	$LOCAL/config/romeditor

	if [ $AUTO ]; then
		make clean
	else
		echo "clean out folder?"
		read -p "yes/no? " purgeout

		if [ "$purgeout" == "" ]; then
			echo ""
			echo "Did you just hit enter without a care? for that im just gonna clean the folder anyways.."

			make clean
		fi

		if [ $purgeout == "yes" ] || [ $purgeout == "y" ]; then
			make clean
		fi
	fi
fi

#setup ccache
if ( ! find ~/.ccache &> /dev/null); then
	echo "The kitchen did not detect the ccache file, did you want to make one now?"
	echo "If ccache is located at another location type in other"
	read ccacheuse

	if [ $ccacheuse == "yes" ] || [ $ccacheuse == "y" ]; then
		echo "How big do you want ccache? suggested size is 50 - 100 gigabytes"
		echo "Keep in mind the amount typed is in gigabytes"
		read ccachesize

		if ( uname -a | grep -q Darwin ); then
			if ( find prebuilts/misc/darwin-x86/ccache/ccache &> /dev/null); then
				prebuilts/misc/darwin-x86/ccache/ccache -M $ccachesizeG
			elif ( find prebuilt/darwin-x86/ccache/ccache &> /dev/null); then
				prebuilt/darwin-x86/ccache/ccache -M $ccachesizeG
			else
				echo "Repository does not support ccache, continuing without it"
				noccache=true
			fi
		else
			if ( find prebuilts/misc/linux-x86/ccache/ccache &> /dev/null); then
				prebuilts/misc/linux-x86/ccache/ccache -M $ccachesizeG
			elif ( find prebuilt/linux-x86/ccache/ccache &> /dev/null); then
				prebuilt/linux-x86/ccache/ccache -M $ccachesizeG
			else
				echo "Repository does not support ccache, continuing without it"
				noccache=true
			fi
		fi
	elif [ $ccacheuse == "other" ]; then
		echo "Where is the exact location of ccache? Example of where default location is is ~/.ccache"
		read ccachelocation

		if ( ! find $ccachelocation &> /dev/null); then
			echo "Location specified was not found, continuing without it"
			noccache=true
		else
			export CCACHE_DIR=$( echo "$ccachelocation" )
		fi
	else
		echo "Continuing without ccache use"
		noccache=true
	fi

	if [ ! "$noccache" ]; then
		export USE_CCACHE=1
	fi
else
	export USE_CCACHE=1
fi

#build android
if ( cat vendor/*/vendorsetup.sh | grep $SCRIPT_DEVICE &> /dev/null ); then
	lunch_device=$( cat $( find vendor/*/vendorsetup.sh | sed "/cm\/vendorsetup.sh/d" | head -n 1 ) \
	| grep $SCRIPT_DEVICE | sed 's/add_lunch_combo //' )
fi

if [ ! "$lunch_device" ] && ( find device/*/$SCRIPT_DEVICE/vendorsetup.sh &> /dev/null ); then
	lunch_device=$( cat device/*/$SCRIPT_DEVICE/vendorsetup.sh | grep $SCRIPT_DEVICE | sed 's/add_lunch_combo //' )
fi

if [ ! "$lunch_device" ]; then
		echo "Repository not supported!"
		read -p "Press Enter to continue: " done
		exit 0
fi

if [ $SCRIPT_REPO == "cm" ]; then
	brunch $SCRIPT_DEVICE -j $THREADS_TOTAL
elif [ $SCRIPT_REPO == "pacman" ]; then
	rm -f out/target/product/$SCRIPT_DEVICE/obj/KERNEL_OBJ/.version

	lunch pac_$SCRIPT_DEVICE-userdebug
	make bacon -j $THREADS_TOTAL

	vendor/pac/tools/squisher

	rm -f $outfolder/cm-*.*
	rm -f $outfolder/pac_*-ota*.zip
elif [ $SCRIPT_REPO == "paranoid" ]; then
	lunch pa_$SCRIPT_DEVICE-userdebug
	mka bacon
else
	lunch $lunch_device
	make otapackage -j $THREADS_TOTAL
fi

#build aftermath
cd $repofolder/out/target/product/$SCRIPT_DEVICE
zip=$( find *$SCRIPT_DEVICE*.zip 2> /dev/null )

if [ ! $zip ]; then
	echo "Build messed up! Returning to build menu"
	read -p "Press Enter to continue: " done
	exit 0
fi

if [ ! "$OTHER_REPO" ] && [ $SCRIPT_REPO == "aosp" ] || [ ! "$OTHER_REPO" ] && [ $SCRIPT_REPO == "raosp" ]; then

	echo "Making temporary folder for post-building $zip fixes"
	mkdir -p $BUILDS/temp/zipout
	cp $zip $BUILDS/temp
	cd $BUILDS/temp/zipout

	echo "Unzipping $zip"
	unzip ../$zip > /dev/null

	echo "Removing uneeded recovery folder and file_contexts from $zip"
	rm -r recovery
	rm file_contexts

	if [ $SCRIPT_REPO == "aosp" ]; then
		cd system
		echo "Adding rom manager items to $zip's build.prop"
		echo "ro.rommanager.developerid=$(whoami)" >> build.prop
		echo "ro.modversion=$newzip >> build.prop"

		cd ..
	fi

	cd META-INF/com/google/android
	sed -i "/install-recovery.sh.*/d" updater-script
	cd $BUILDS/temp/zipout
	

	echo "Zipping $zip back up"
	zip -r unsignedcrap.zip . > /dev/null

	echo "Signing $zip with test keys"
	java -Xmx1024m -classpath $LOCAL/testsign.jar testsign unsignedcrap.zip $zip
fi

if ( find $buildfolder/*$SCRIPT_DEVICE.zip &> /dev/null); then
	mkdir -p $buildfolder/old

	echo "Moving older build to $buildfolder/old"

	mv $buildfolder/*$SCRIPT_DEVICE.zip $buildfolder/old
	mv $buildfolder/*$SCRIPT_DEVICE.zip.md5sum $buildfolder/old
fi

mkdir -p $buildfolder

echo "Copying to $buildfolder"
echo "$zip -> $newzip"
cat $zip > $buildfolder/$newzip

if [ ! "$OTHER_REPO" ] && [ $SCRIPT_REPO == "aosp" ] || [ ! "$OTHER_REPO" ] && [ $SCRIPT_REPO == "raosp" ]; then
	echo "Cleaning up temporary folder"
	cd $BUILDS
	rm -r temp
fi

cd $buildfolder
md5sum $newzip
md5sum $newzip > $newzip.md5sum

echo "Finished!"
read -p "Press Enter to continue: " done
