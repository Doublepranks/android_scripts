#!/bin/bash
# Initial setup
if [ ! "$INIT" ]; then
	export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
	cd $(dirname $0)
	export SCRIPT=$(echo "buildauto")
	../headerfile
	exit 0
fi

export AUTO=true

# ::::::::::::::::::::::::::::::::::::::::::::::

if ( find $LOCAL/config/otherrepoauto &> /dev/null ); then
	autorepo=$( echo "otherrepoauto" )
else
	autorepo=$( echo "scriptfolder" )
fi

if ( find $LOCAL/config/otherdeviceauto &> /dev/null ); then
	autodevice=$( echo "otherdeviceauto" )
else
	autodevice=$( echo "scriptdevice" )
fi

# Check to see if auto builder can run
if ( ! find $LOCAL/config/$autorepo &> /dev/null ) \
&& ( ! find $LOCAL/config/$autodevice &> /dev/null ); then
	echo "Both Auto Builder's repository and device is not set!"
	echo "Please use the Auto Builder config menu"
	read -p "Press Enter to continue: " done
	exit 0
elif ( ! find $LOCAL/config/$autorepo &> /dev/null ); then
	echo "Auto Builder's repository is not set!"
	echo "Please use the Auto Builder config menu"
	read -p "Press Enter to continue: " done
	exit 0
elif ( ! find $LOCAL/config/$autodevice &> /dev/null ); then
	echo "Auto Builder's device is not set!"
	echo "Please use the Auto Builder config menu"
	read -p "Press Enter to continue: " done
	exit 0
fi

# ::::::::::::::::::::::::::::::::::::::::::::::

# Buildoutput if
if ( ! find $LOCAL/config/toggleoutfile &> /dev/null ); then
	toggleout=""
else
	if ( ! find $LOCAL/config/outfile &> /dev/null ); then
		outfile=$(echo $LOCAL/..)
	else
		outfile=$(cat $LOCAL/config/outfile | head -n 1)
	fi

	toggleout="2>&1 | tee -a $outfile/buildoutput-$(date +%Y%m%d).txt"
fi
# ::::::::::::::::::::::::::::::::::::::::::::::

# Repo folder setup
echo "EOF" >> $LOCAL/config/$autorepo

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while true; do
	let repocount=$repocount+1
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	scriptfolder[$repocount]=$( cat $LOCAL/config/$autorepo | sed -n "$repocount"p )
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if [ "${scriptfolder[$repocount]}" == "EOF" ]; then
		break
	fi
done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sed -i "/EOF/d" $LOCAL/config/$autorepo

# ::::::::::::::::::::::::::::::::::::::::::::::

# Device setup
echo "EOF" >> $LOCAL/config/$autodevice

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while true; do
	let devicecount=$devicecount+1
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	scriptdevice[$devicecount]=$( cat $LOCAL/config/$autodevice | sed -n "$devicecount"p )
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if [ "${scriptdevice[$devicecount]}" == "EOF" ]; then
		break
	fi
done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sed -i "/EOF/d" $LOCAL/config/$autodevice

# ::::::::::::::::::::::::::::::::::::::::::::::

# Sync repos
INIT=""
reposync -u kitchen "$toggleout"
repocountdown=""

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while true; do
	let repocountdown=$repocountdown+1

	if ( echo "${scriptfolder[$repocountdown]}" | grep -q "EOF" ); then
		break
	fi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if ( ! find $LOCAL/config/otherrepoauto &> /dev/null ); then
		export REPO_SYNC=$( cat $LOCAL/config/scriptautosync | sed -n "$repocountdown"p )
		INIT=""
		reposync -u $REPO_SYNC "$toggleout"
	else
		cd "$REPOS/otherrepo/${scriptfolder[$repocountdown]}"
		repo sync -j $NETWORKSYNC "$toggleout"
	fi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ::::::::::::::::::::::::::::::::::::::::::::::

# Build Device
repocountdown=""
devicecountdown=""

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while true; do
	let repocountdown=$repocountdown+1

	if ( echo "${scriptfolder[$repocountdown]}" | grep -q "EOF" ); then
		break
	fi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if ( ! find $LOCAL/config/otherrepoauto &> /dev/null ); then
		auto_build=true
		auto_build_folder=$( echo "${scriptfolder[$repocountdown]}" )
		script_repo=$( echo "${scriptfolder[$repocountdown]}" | sed 's/-.*//' )
		repo_platform=$( echo "${scriptfolder[$repocountdown]}" | sed 's/.*-//' )
	else
		other_repo=$( echo "${scriptfolder[$repocountdown]}" )
		other_repo_folder=$(echo "$REPOS/otherrepo/"${scriptfolder[$repocountdown]}"")
		script_repo=$( echo "${scriptfolder[$repocountdown]}" | sed 's/-.*//' )
		repo_platform=$( echo "${scriptfolder[$repocountdown]}" | sed 's/.*-//' )
	fi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	while true; do
		let devicecountdown=$devicecountdown+1

		if [ $devicecountdown == "2" ]; then
			sloppyseconds=true
		fi

		if ( echo "${scriptdevice[$devicecountdown]}" | grep -q "EOF" ); then
			sloppyseconds=""
			break
		fi

		script_device=$( echo "${scriptdevice[$devicecountdown]}" )
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		. buildandro "$toggleout"
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		# Publish Build ( if possible )
		if ( find $PUBLISH -maxdepth 1 &> /dev/null); then
			publishandro "$toggleout"
		fi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
done
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ::::::::::::::::::::::::::::::::::::::::::::::

# Put computer to sleep ( if setup to do so )
if ( find $LOCAL/config/sleepybuildserver &> /dev/null ); then
	echo "" "$toggleout"
	echo "Waiting for ten minutes! this is not a countdown.." "$toggleout"
	sleep 10m
	echo "Sleep..." "$toggleout"

	sleeptime=$( cat $LOCAL/config/sleepybuildserver | sed -n 1p )
	passy=$( cat $LOCAL/config/sleepybuildserver | sed -n 2p )
	timekind=$( cat $LOCAL/config/sleepybuildserver | sed -n 3p )

	if [ $timekind == "specifictime" ]; then
		rawsleeptime=$((`date +%s -d $sleeptime` + 24*60*60))

		echo $passy | sudo -S rtcwake -n -l -m mem -t $rawsleeptime > $outfile/sleeptime-$(date +%Y%m%d).txt 2>&1
		sleep 30
		echo $passy | sudo -S rtcwake -l -m mem -t $rawsleeptime >> $outfile/sleeptime-$(date +%Y%m%d).txt 2>&1
	elif [ $timekind == "hoursfromnow" ]; then
		rawsleeptime=$((($sleeptime * 60) * 60))

		echo $passy | sudo -S rtcwake -n -l -m mem -s $rawsleeptime > $outfile/sleeptime-$(date +%Y%m%d).txt 2>&1
		sleep 30
		echo $passy | sudo -S rtcwake -l -m mem -s $rawsleeptime >> $outfile/sleeptime-$(date +%Y%m%d).txt 2>&1
	fi
fi
