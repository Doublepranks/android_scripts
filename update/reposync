#!/bin/bash
# Written by Sean Donovan (swordrune10)

if [ ! "$INIT" ]; then

usage="$(basename "$0") [-d] [-h] [-p] [-u] repo -- program to initialize/update android repos

where:
	-d  delete the appropriate folder and then exit program
	-h  show this help text
	-p  purge folder, reinit, and then update
	-u  update this particular repo

	    Options list:
	    kitchen = Update Kitchen
	    aokp = Update Android Open Kang Project
	    aosp43 = Update Android Open Source Project 4.3
	    aosp = Update Android Open Source Project 4.4
	    carbon = Update Carbon
	    cm9 = Update Cyanogenmod 9
	    cm10 = Update Cyanogenmod 10
	    cm = Update Cyanogenmod 10.2
	    ev = Update Evervolv
	    omni = Update omnirom
	    pacman = Update PAC-man
	    paranoid = Update ParanoidAndroid
	    raosp = Update Rooted & Busyboxed AOSP
	    all = Update all available repos and their manifests
	    allthethings = Update all the repos

	    Example: reposync -u cm-10.2

	    typing \"reposync -u list\" will give
	    you the options list again"

	export AUTO=true

while getopts 'd:hp:u:' option; do
	if [ $option == "d" ]; then
		export PLATFORM=$OPTARG
		export DELETEFOLDERANDTHATSIT="true"
	fi

	if [ $option == "h" ]; then
		echo "$usage"
		exit 0
	fi

	if [ $option == "p" ]; then
		export PLATFORM=$OPTARG
		export DELETEFOLDER="true"
	fi

	if [ $option == "u" ]; then
		export PLATFORM=$OPTARG
	fi
done

fi

if [ ! "$INIT" ]; then
	cd $(dirname $0)
	export SCRIPT=$(echo "reposync")
	../headerfile
	exit 0
fi

menu () {

if [ ! "$AUTO" ]; then
	clear

	echo "Swordrune10's Android Kitchen!"
	echo "=============================="
	echo "What are we updating?"
	echo "If repo isn't initialized, it will be on update"
	echo "  1. Install the repo command"
	echo "  2. Setup the build enviroment"
	echo "  3. Update the Kitchen app repository"
	echo "  4. Update the Android Open Kang Project repository"
	echo "  5. Update the Android Open Source Project 4.3 repository"
	echo "  6. Update the Android Open Source Project 4.4 repository"
	echo "  7. Update the Carbon repository"
	echo "  8. Update the Cyanogenmod 9 repository"
	echo "  9. Update the Cyanogenmod 10 repository"
	echo "  10. Update the Cyanogenmod 10.2 repository"
	echo "  11. Update the Evervolv repository"
	echo "  12. Update the omnirom repository"
	echo "  13. Update the PAC-man repository"
	echo "  14. Update the ParanoidAndroid repository"
	echo "  15. Update the Rooted & Busyboxed AOSP repository"
	echo "  16. Update all available repositories and their manifests"
	echo "  17. Update all the repos!"
	echo "  18. Update/add otherrepo"
	echo "  19. Go Back"
	read setupanswer

	if [ ! "$setupanswer" ] || ( echo $setupanswer | grep -q [A-Za-z] ) || [ $setupanswer -gt "19" ]; then
		echo ""
		echo "You did not make a proper selection, try again!"
		read -p "Press Enter to continue: " done
		menu
	fi
fi

if [ "$PLATFORM" ]; then
	if [ $PLATFORM == "list" ]; then
		echo "kitchen = Update Kitchen"
		echo "aokp = Update Android Open Kang Project"
		echo "aosp43 = Update Android Open Source Project 4.3"
		echo "aosp = Update Android Open Source Project 4.4"
		echo "carbon = Update Carbon"
		echo "cm9 = Update Cyanogenmod 9"
		echo "cm10 = Update Cyanogenmod 10"
		echo "cm = Update Cyanogenmod 10.2"
		echo "evervolv = Update Evervolv"
		echo "omni = Update omnirom"
		echo "pacman = Update PAC-man"
		echo "paranoid = Update ParanoidAndroid"
		echo "raosp = Update Rooted & Busyboxed AOSP"
		echo "all = Update all available repos and their manifests"
		echo "allthethings = Update all the repos"
		exit 0
	fi

	if [ $PLATFORM == "kitchen" ]; then
		setupanswer="3"
	fi

	if [ $PLATFORM == "aokp" ]; then
		setupanswer="4"
	fi

	if [ $PLATFORM == "aosp43" ]; then
		setupanswer="5"
	fi

	if [ $PLATFORM == "aosp" ]; then
		setupanswer="6"
	fi

	if [ $PLATFORM == "carbon" ]; then
		setupanswer="7"
	fi

	if [ $PLATFORM == "cm9" ]; then
		setupanswer="8"
	fi

	if [ $PLATFORM == "cm10" ]; then
		setupanswer="9"
	fi

	if [ $PLATFORM == "cm" ]; then
		setupanswer="10"
	fi

	if [ $PLATFORM == "ev" ] || [ $PLATFORM == "evervolv" ]; then
		setupanswer="11"
	fi

	if [ $PLATFORM == "omni" ]; then
		setupanswer="12"
	fi

	if [ $PLATFORM == "pacman" ]; then
		setupanswer="13"
	fi

	if [ $PLATFORM == "paranoid" ]; then
		setupanswer="14"
	fi

	if [ $PLATFORM == "raosp" ]; then
		setupanswer="15"
	fi

	if [ $PLATFORM == "all" ]; then
		setupanswer="16"
	fi
	if [ $PLATFORM == "allthethings" ]; then
		setupanswer="17"
	fi
fi

setupcheck() {
if [ $SCRIPT_REPO == "kitchen" ]; then
	export REPO_FOLDER=$( echo "$LOCAL/.." )
else
	if [ $otherreposync ]; then
		export REPO_FOLDER=$( echo "$REPOS/otherrepo/$SCRIPT_REPO-$REPO_PLATFORM" )
	else
		export REPO_FOLDER=$( echo "$REPOS/$SCRIPT_REPO-$REPO_PLATFORM" )
	fi
fi

if [ "$DELETEFOLDER" ]; then
	rm -rf $REPO_FOLDER
elif [ "$DELETEFOLDERANDTHATSIT" ]; then
	rm -rf $REPO_FOLDER
	exit 0
fi

initmanifest=""
echo ""

if [ $setupanswer == "15" ] && ( ! find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	echo "$repo_name not initialized, skipping"
elif [ $setupanswer == "15" ] && ( find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	echo "Updating $repo_name's manifest"
	initmanifest=true
elif ( ! find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	if [ ! "$AUTO" ]; then
		if [ $setupanswer == "16" ]; then
			echo "$repo_name not initialized, initializing now"
			initmanifest=true
		else
			echo "$repo_name not initialized, do you want to initialize it?"
			read init

			if [ "$init" == "yes" ] || [ "$init" == "y" ]; then
				echo "initializing $repo_name"
				initmanifest=true
			else
				echo "$repo_name wasn't initialized"
			fi
		fi
	else
		if [ ! "$DELETEFOLDER" ]; then
			echo "$repo_name not initialized, initializing now"
		fi

		initmanifest=true
	fi
fi
	setupcode
	synccode

if [ "$done" ]; then
	echo ""
	echo "$repo_name Update Complete!"

	if [ ! "$AUTO" ]; then
		echo ""
		echo "Finished!"
		read -p "Press Enter to continue: " done
		menu
	else
		exit 0
	fi
fi
}

setupcode() {
if [ "$initmanifest" ]; then
	if [ ! $SCRIPT_REPO == "kitchen" ]; then
		mkdir -p $REPO_FOLDER
	fi

	cd $REPO_FOLDER

	repo init -u $repo_url -b $repo_branch
fi
}

synccode() {
if ( find $REPO_FOLDER/.repo -maxdepth 1 &> /dev/null); then
	cd $REPO_FOLDER

	preupdate
	echo ""
	echo "Updating $repo_name repository"
	repo sync -n -j $NETWORKSYNC
	repo sync -l -d -j $LOCALSYNC

	$LOCAL/config/gitpuller

	postupdate
fi
}

if [ $setupanswer == "1" ]; then
	if ( type -a repo &> /dev/null ); then
		echo ""
		echo "repo is already installed"
		read -p "Press Enter to continue: " done
	else
		echo ""
		echo "Installing the repo command"

		if ( ! find ~/bin &> /dev/null ); then
			mkdir ~/bin
		fi

		curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
		chmod a+x ~/bin/repo

		echo ""
		echo "Finished!"
		read -p "Press Enter to continue: " done
	fi
fi

if [ $setupanswer == "2" ]; then
	environmentsetup
fi

if [ $setupanswer == "3" ]; then
	export SCRIPT_REPO=$(echo "kitchen")
	export REPO_PLATFORM=$(echo "master")
	repo_branch=$(echo "master")
	repo_name=$(echo "Kitchen app")
	repo_url=$(echo "http://github.com/TeamKeyblade/kitchen_manifest.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "4" ]; then
	export SCRIPT_REPO=$(echo "aokp")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jb-mr2")
	repo_name=$(echo "Android Open Kang Project")
	repo_url=$(echo "http://github.com/AOKP/platform_manifest.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "5" ]; then
	export SCRIPT_REPO=$(echo "aosp")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "android-4.3.1_r1")
	repo_name=$(echo "Android Open Source Project")
	repo_url=$(echo "https://android.googlesource.com/platform/manifest")
	done=true
	setupcheck
fi

if [ $setupanswer == "6" ]; then
	export SCRIPT_REPO=$(echo "aosp")
	export REPO_PLATFORM=$(echo "kitkat")
	repo_branch=$(echo "kitkat-release")
	repo_name=$(echo "Android Open Source Project")
	repo_url=$(echo "https://android.googlesource.com/platform/manifest")
	done=true
	setupcheck
fi

if [ $setupanswer == "7" ]; then
	export SCRIPT_REPO=$(echo "carbon")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jb3")
	repo_name=$(echo "Carbon")
	repo_url=$(echo "http://github.com/CarbonDev/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "8" ]; then
	export SCRIPT_REPO=$(echo "cm")
	export REPO_PLATFORM=$(echo "ics")
	repo_branch=$(echo "ics")
	repo_name=$(echo "Cyanogenmod 9")
	repo_url=$(echo "http://github.com/CyanogenMod/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "9" ]; then
	export SCRIPT_REPO=$(echo "cm")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jellybean")
	repo_name=$(echo "Cyanogenmod 10")
	repo_url=$(echo "http://github.com/CyanogenMod/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "10" ]; then
	export SCRIPT_REPO=$(echo "cm")
	export REPO_PLATFORM=$(echo "10.2")
	repo_branch=$(echo "cm-10.2")
	repo_name=$(echo "Cyanogenmod 10.2")
	repo_url=$(echo "http://github.com/CyanogenMod/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "11" ]; then
	export SCRIPT_REPO=$(echo "evervolv")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jellybean-4.3")
	repo_name=$(echo "Evervolv")
	repo_url=$(echo "http://github.com/Evervolv/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "12" ]; then
	export SCRIPT_REPO=$(echo "omni")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "android-4.3")
	repo_name=$(echo "omnirom")
	repo_url=$(echo "http://github.com/omnirom/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "13" ]; then
	export SCRIPT_REPO=$(echo "pacman")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "cm-10.2")
	repo_name=$(echo "PAC-man")
	repo_url=$(echo "http://github.com/PAC-man/android.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "14" ]; then
	export SCRIPT_REPO=$(echo "paranoid")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jb43")
	repo_name=$(echo "ParanoidAndroid")
	repo_url=$(echo "http://github.com/ParanoidAndroid/manifest.git")
	done=true
	setupcheck
fi

if [ $setupanswer == "15" ]; then
	export SCRIPT_REPO=$(echo "raosp")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "android-4.3.1_r1")
	repo_name=$(echo "Rooted & Busyboxed AOSP")
	repo_url=$(echo "https://android.googlesource.com/platform/manifest")
	done=true
	setupcheck
fi

if [ $setupanswer == "16" ] || [ $setupanswer == "17" ]; then
	export SCRIPT_REPO=$(echo "kitchen")
	export REPO_PLATFORM=$(echo "master")
	repo_branch=$(echo "master")
	repo_name=$(echo "Kitchen app")
	repo_url=$(echo "http://github.com/TeamKeyblade/kitchen_manifest.git")
	setupcheck

	export SCRIPT_REPO=$(echo "aokp")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jb")
	repo_name=$(echo "Android Open Kang Project")
	repo_url=$(echo "http://github.com/AOKP/platform_manifest.git")
	setupcheck

	export SCRIPT_REPO=$(echo "aosp")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "android-4.3.1_r1")
	repo_name=$(echo "Android Open Source Project")
	repo_url=$(echo "https://android.googlesource.com/platform/manifest")
	setupcheck

	export SCRIPT_REPO=$(echo "aosp")
	export REPO_PLATFORM=$(echo "kitkat")
	repo_branch=$(echo "kitkat-release")
	repo_name=$(echo "Android Open Source Project")
	repo_url=$(echo "https://android.googlesource.com/platform/manifest")
	setupcheck

	export SCRIPT_REPO=$(echo "carbon")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jb3")
	repo_name=$(echo "Carbon")
	repo_url=$(echo "http://github.com/CarbonDev/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "cm")
	export REPO_PLATFORM=$(echo "ics")
	repo_branch=$(echo "ics")
	repo_name=$(echo "Cyanogenmod 9")
	repo_url=$(echo "http://github.com/CyanogenMod/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "cm")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jellybean")
	repo_name=$(echo "Cyanogenmod 10")
	repo_url=$(echo "http://github.com/CyanogenMod/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "cm")
	export REPO_PLATFORM=$(echo "10.2")
	repo_branch=$(echo "cm-10.2")
	repo_name=$(echo "Cyanogenmod 10.2")
	repo_url=$(echo "http://github.com/CyanogenMod/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "evervolv")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jellybean")
	repo_name=$(echo "Evervolv")
	repo_url=$(echo "http://github.com/Evervolv/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "omni")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "android-4.3")
	repo_name=$(echo "omnirom")
	repo_url=$(echo "http://github.com/omnirom/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "pacman")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "cm-10.2")
	repo_name=$(echo "PAC-man")
	repo_url=$(echo "http://github.com/PAC-man/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "paranoid")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "jellybean")
	repo_name=$(echo "ParanoidAndroid")
	repo_url=$(echo "http://github.com/ParanoidAndroid/android.git")
	setupcheck

	export SCRIPT_REPO=$(echo "raosp")
	export REPO_PLATFORM=$(echo "jb")
	repo_branch=$(echo "android-4.3.1_r1")
	repo_name=$(echo "Rooted & Busyboxed AOSP")
	repo_url=$(echo "https://android.googlesource.com/platform/manifest")
	done=true
	setupcheck
fi

if [ $setupanswer == "17" ]; then
	clear

	echo "Swordrune10's Android Kitchen!"
	echo "=============================="
	echo "Are we adding or updating otherrepo?"
	echo ""
	echo "Which android repository are we building from today?"
	echo "  1. Add to custom repo folder"
	echo "  2. Update all the custom repos"
	echo "  3. Go Back"
	read otheranswer

	if [ ! "$otheranswer" ] || ( echo $otheranswer | grep -q [A-Za-z] ) || [ $otheranswer -gt "3" ]; then
		echo ""
		echo "You did not make a proper selection, try again!"
		read -p "Press Enter to continue: " done
		menu
	fi

	if [ $otheranswer == "1" ]; then
		echo "What is the repo's name?"
		read manifestname

		echo "What is a short name for this repo? Example: Android Open Source Project = aosp"
		read manifestshortname

		echo "What is the url to the repo's manifest?"
		read manifesturl

		echo "What is the branch the repo's manifest you want to use?"
		read manifestbranch

		export SCRIPT_REPO=$(echo $manifestshortname)
		export REPO_PLATFORM=$(echo $manifestbranch)
		repo_branch=$(echo $manifestbranch)
		repo_name=$(echo $manifestname)
		repo_url=$(echo $manifesturl)
		done=true
		otherreposync=true
	
		echo $SCRIPT_REPO-$REPO_PLATFORM >> $LOCAL/config/otherrepo
		echo $repo_name >> $LOCAL/config/otherreponame
		
		setupcheck
	fi

	if [ $otheranswer == "2" ]; then
		for otherreposync in `ls $REPOS/otherrepo/* 2> /dev/null`
		do
			cd $otherreposync
			repo sync
		done
	fi

	if [ $otheranswer == "3" ]; then
		echo ""
		read -p "Press Enter to continue: " done
		menu
	fi
fi

if [ $setupanswer == "18" ]; then
	echo ""
	read -p "Returning to Main Menu, Press Enter to continue: " done
	exit 0
fi

if [ $AUTO ]; then
	exit 0
fi

menu
}
menu
